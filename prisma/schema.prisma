// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  password          String?     // Hashed password for email/password authentication
  image             String?
  role              UserRole    @default(USER)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  accounts          Account[]
  sessions          Session[]
  watermarks        Watermark[]
  userAnalytics     UserAnalytics?
  storageUsed       Int         @default(0) // Storage used in bytes
  payment           Payment?    // Relation to payment information
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Watermarker Models
model Watermark {
  id          String   @id @default(cuid())
  name        String
  type        WatermarkType
  content     String   // Text content or base64 encoded image
  position    String?  // Stored as JSON string: {x: number, y: number}
  opacity     Float    @default(1.0)
  scale       Float    @default(1.0)
  rotation    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAnalytics {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress   String?
  device      String?
  country     String?
  city        String?
  lastVisit   DateTime @default(now())
  visitCount  Int      @default(1)
}

model SiteSettings {
  id              String  @id @default("settings")
  maintenanceMode Boolean @default(false)
}

// Payment Model
model Payment {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String?  // Stripe customer ID
  stripePriceId   String?   // Stripe price ID
  stripeSessionId String?   // Stripe checkout session ID
  status          PaymentStatus @default(UNPAID)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum WatermarkType {
  TEXT
  IMAGE
}

enum PaymentStatus {
  UNPAID
  PAID
}
